{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mp-res","text":"<p>mp-res helps to download the MaterialsProject database and convert it to files in the res format as used by AIRSS.</p> <p>Useful Links</p> <p>Materials Project API (mp_api)</p> <ul> <li>Github<ul> <li>mprester.py</li> </ul> </li> <li>Documentation 1</li> <li>Documentation 2</li> </ul> <p>Pymatgen package</p> <ul> <li>Github<ul> <li>res.py</li> </ul> </li> <li>[Documentation]<ul> <li>pymatgen.io.res</li> </ul> </li> </ul>"},{"location":"examples/","title":"Getting data as documents","text":""},{"location":"examples/#getting-data-as-structurecomputedentry","title":"Getting data as StructureComputedEntry","text":""},{"location":"examples/0_basic/get_doc/EXAMPLE/","title":"Check list of available fields (data) for each Endpoint or Document Model","text":"<p>You can access to the information from the Materials Project database through various Endpoints of the Materials Project API. Each endpoint provides different document model contatining different set of properties.</p> <p>Endpoints are categorised into <code>materials.*</code> endpoints and <code>molecules.*</code> endpoints. You are most likely to use <code>materials.summary</code> and <code>materials.thermo</code> primarily.</p> <p>For more information about Endpoints and Document Model, please see the documentation. </p> <p>You can check a list of avaialble fields (properties) from the MPRester, as follows:</p> <pre><code>available_fields = mpr.[endpoint].available_fields\n</code></pre> <p>The <code>available_fields</code> property for APIs is meant to refer to the data available from the endpoint.</p> <p>For example:</p> <pre><code>available_fields = mpr.materials.summary.available_fields\navailable_feilds = mpr.materials.thermo.available_fields\n</code></pre> Available fields for <code>materials.summary</code> endpoint with <code>SummaryDoc</code> <pre><code>builder_meta\nnsites\nelements\nnelements\ncomposition\ncomposition_reduced\nformula_pretty\nformula_anonymous\nchemsys\nvolume\ndensity\ndensity_atomic\nsymmetry\nproperty_name\nmaterial_id\ndeprecated\ndeprecation_reasons\nlast_updated\norigins\nwarnings\nstructure\ntask_ids\nuncorrected_energy_per_atom\nenergy_per_atom\nformation_energy_per_atom\nenergy_above_hull\nis_stable\nequilibrium_reaction_energy_per_atom\ndecomposes_to\nxas\ngrain_boundaries\nband_gap\ncbm\nvbm\nefermi\nis_gap_direct\nis_metal\nes_source_calc_id\nbandstructure\ndos\ndos_energy_up\ndos_energy_down\nis_magnetic\nordering\ntotal_magnetization\ntotal_magnetization_normalized_vol\ntotal_magnetization_normalized_formula_units\nnum_magnetic_sites\nnum_unique_magnetic_sites\ntypes_of_magnetic_species\nbulk_modulus\nshear_modulus\nuniversal_anisotropy\nhomogeneous_poisson\ne_total\ne_ionic\ne_electronic\nn\ne_ij_max\nweighted_surface_energy_EV_PER_ANG2\nweighted_surface_energy\nweighted_work_function\nsurface_anisotropy\nshape_factor\nhas_reconstructed\npossible_species\nhas_props\ntheoretical\ndatabase_IDs\n</code></pre> Available fields for <code>materials.thermo</code> endpoint with <code>ThermoDoc</code> <pre><code>builder_meta                                                                                                            \nnsites                                                                                                                  \nelements                                                                                                                \nnelements                                                                                                               \ncomposition                                                                                                             \ncomposition_reduced                                                                                                     \nformula_pretty                                                                                                          \nformula_anonymous                                                                                                       \nchemsys                                                                                                                 \nvolume                                                                                                                  \ndensity                                                                                                                 \ndensity_atomic                                                                                                          \nsymmetry                                                                                                                \nproperty_name                                                                                                           \nmaterial_id                                                                                                             \ndeprecated                                                                                                              \ndeprecation_reasons                                                                                                     \nlast_updated                                                                                                            \norigins                                                                                                                 \nwarnings                                                                                                                \nthermo_type                                                                                                             \nthermo_id                                                                                                               \nuncorrected_energy_per_atom                                                                                             \nenergy_per_atom                                                                                                         \nenergy_uncertainy_per_atom                                                                                              \nformation_energy_per_atom                                                                                               \nenergy_above_hull                                                                                                       \nis_stable                                                                                                               \nequilibrium_reaction_energy_per_atom                                                                                    \ndecomposes_to                                                                                                           \ndecomposition_enthalpy                                                                                                  \ndecomposition_enthalpy_decomposes_to                                                                                    \nenergy_type                                                                                                             \nentry_types                                                                                                             \nentries      \n</code></pre> <p>Note</p> <p>The available fields are not necessarily which fields you can use to query that data with via <code>search()</code>. See the API-specific search() kwargs for details on which parameters can be used for filtering queries.</p>"},{"location":"examples/0_basic/get_doc_chemsys/EXAMPLE/","title":"Get all materials containing only a set of elements","text":"<p>This examples describes how to get data for materials containing only a list of elements from the Materials Project database.</p> <p>For example:</p> <ul> <li>all Li-Ni-O ternary compounds (Li + Ni + O)</li> <li>all elemental, binary, ternary compounds in Li-Ni-O chemical system.</li> </ul>"},{"location":"examples/0_basic/get_doc_chemsys/EXAMPLE/#materialssummary-endpoint","title":"materials.summary endpoint","text":"<p>You can get a list of SummaryDoc for all materials containing only a hyphenated list of elements specified to the <code>chemsys</code> argument, as follows:</p> <pre><code>docs = mpr.materials.summary.search(\n    chemsys=chemsys\n)\n</code></pre> <p>Info</p> <p>Elements can be listed in any order. For example, Li-Ni-O, O-Li-Ni, and Ni-O-Li are all considered equal.</p>"},{"location":"examples/0_basic/get_doc_chemsys/EXAMPLE/#examples","title":"Examples","text":"<pre><code>docs = mpr.materials.summary.search(\n    chemsys=[\"Li-Ni-O\"]\n)\n</code></pre> <p>This returns a list of SummaryDoc for all materials containing only Li, Ni, and O elements from the Materials Project database. It returns a total of 142 SummaryDoc with 1 unique chemsys and 3 elements.</p> <pre><code>docs = mpr.materials.summary.search(\n    chemsys=[\"Li\", \"Ni\", O\", \"Li-Ni\", \"Li-O\", \"Ni-O\", \"Li-Ni-O\"]\n)\n</code></pre> <p>This returns a list of SummaryDoc for all elementa, binary, and ternary materials containing Li, Ni, or O elements from the Materials Project database. It returns a total of 240 SummaryDoc with 7 unique chemsys and 1-3 elements.</p> <p>Generating all combinatorial chemsys</p> <p>All combinatorial chemical systems can be easily generated using itertools</p> <pre><code>chemsys = []                                                                                                        \nfor i in range(len(elements)):                                                                                  \n    for els in itertools.combinations(elements, i + 1):                                                         \n        chemsys.append(\"-\".join(sorted(els)))                                                                   \n</code></pre>"},{"location":"examples/0_basic/get_doc_chemsys/EXAMPLE/#materialsthermo-endpoint","title":"materials.thermo endpoint","text":"<p>You can get a list of ThermoDoc for all materials containing only a hyphenated list of elements specified to the <code>chemsys</code> argument, as follows:</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=chemsys\n)\n</code></pre> <p>Info</p> <p>Elements can be listed in any order. For example, Li-Ni-O, O-Li-Ni, and Ni-O-Li are all considered equal.</p>"},{"location":"examples/0_basic/get_doc_chemsys/EXAMPLE/#examples_1","title":"Examples","text":"<pre><code>docs = mpr.materials.thermo.search(\n    chemsys=[\"Li-Ni-O\"]\n)\n</code></pre> <p>This returns a list of ThermoDoc for all materials containing only Li, Ni, and O elements from the Materials Project database. It returns a total of 311 ThermoDoc with 1 unique chemsys and 3 elements.</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=[\"Li\", \"Ni\", O\", \"Li-Ni\", \"Li-O\", \"Ni-O\", \"Li-Ni-O\"]\n)\n</code></pre> <p>This returns a list of ThermoDoc for all elementa, binary, and ternary materials containing Li, Ni, or O elements from the Materials Project database. It returns a total of 526 ThermoDoc with 7 unique chemsys and 1-3 elements.</p> <p>Wild cards in chemsys</p> <p>wild cards in chemsys don't seem to work as expected. Each <code>*</code> just replace on element in a chemsys. For example:</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=['Li-*', '*-Li']\n)\n</code></pre> <p>gives only binary Li-containing compounds.</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=['Li-*-*', '*-Li-*', '*-*-Li']\n)\n</code></pre> <p>gives only ternary Li-containing compounds.</p> <p>I would recommend getting a list of <code>chemsys</code> from the <code>materials.summary</code> endpoint.</p>"},{"location":"examples/0_basic/get_doc_elements/EXAMPLE/","title":"Get all materials containing at least a set of elements","text":"<p>This examples describes how to get data for materials containing at least a list of elements from the Materials Project database.</p> <p>For example:</p> <ul> <li>all Li-containing materials (Li + \u03b1)</li> <li>all materials containing earth abundant O and Si (O + Si + \u03b1)</li> </ul>"},{"location":"examples/0_basic/get_doc_elements/EXAMPLE/#materialssummary-endpoint","title":"materials.summary endpoint","text":"<p>You can get a list of SummaryDoc for all materials containing at least a list of elements specified to the <code>elements</code> argument, as follows:</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=elements\n)\n</code></pre>"},{"location":"examples/0_basic/get_doc_elements/EXAMPLE/#examples","title":"Examples","text":"<pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\"]\n)\n</code></pre> <p>The above returns a list of SummaryDoc for all Li-contatining materials from the Materials Project database. It returns a total of 21686 SummaryDoc with 3372 unique chemsys and 1-8 elements.</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\", \"Ni\", \"O\"]\n)\n</code></pre> <p>This returns a list of SummaryDoc for all materials containing at least Li, Ni, and O elements from the Materials Project database. It returns a total of 1394 SummaryDoc with 147 unique chemsys and 3-6 elements.</p>"},{"location":"examples/0_basic/get_doc_elements/EXAMPLE/#materialsthermo-endpoint","title":"materials.thermo endpoint","text":"<p>From the materials.thermo endpoint, you can't get a list of ThermoDoc for all materials containing a set of elements. materials.thermo do not support <code>elements</code> arguments. <code>materials_id</code> and <code>chemsys</code> are only available. For more information, please see thermo.py</p> <p>Therefore, a list of chemsys should be generated from materials.summary endpoint and then be used as input to materials.chemsys endpoint as follows:</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=elements,\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\ndocs = mpr.materials.thermo.search(\n    chemsys=chemsys,\n)\n</code></pre>"},{"location":"examples/0_basic/get_doc_elements/EXAMPLE/#examples_1","title":"Examples","text":"<pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\"],\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\ndocs = mpr.materials.thermo.search(\n    chemsys=chemsys,\n)\n</code></pre> <p>This returns a total of 45197 ThermoDoc with 3372 unique chemsys and 1-8 elements.</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\", \"Ni\", \"O\"],\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\ndocs = mpr.materials.thermo.search(\n    chemsys=chemsys,\n)\n</code></pre> <p>This returns a total of 2828 ThermoDoc with 147 unique chemsys and 3-6 elements.</p> <p>Long list of material/moldcule IDs</p> <p>When you try to get a list of <code>materials_id</code> from the <code>materials.summary</code> endpoint and use it as input to the <code>materials.thermo</code> endpoint, you can get the following error:</p> <pre><code>elements=[\"Li\"]\nfields=[\"nelements\", \"chemsys\"]\n\ndocs = mpr.materials.summary.search(\n    elements=elements,\n    fields=[\"material_id\"]\n)\n\nmaterial_ids = [doc.material_id for doc in docs]\n\ndocs = mpr.materials.thermo.search(\n    material_ids=material_ids,\n    fields=fields\n)\n</code></pre> <pre><code>ValueError: List of material/molecule IDs provided is too long. Consider\nremoving the ID filter to automatically pull data for all IDs and filter\nlocally.\n</code></pre> <p>I would recommend getting a list of <code>chemsys</code> instead of <code>materials_id</code>.</p> <p>Wild cards in chemsys</p> <p>wild cards in chemsys don't seem to work as expected. Each <code>*</code> just replace on element in a chemsys. For example:</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=['Li-*', '*-Li']\n)\n</code></pre> <p>gives only binary Li-containing compounds.</p> <pre><code>docs = mpr.materials.thermo.search(\n    chemsys=['Li-*-*', '*-Li-*', '*-*-Li']\n)\n</code></pre> <p>gives only ternary Li-containing compounds.</p> <p>I would recommend getting a list of <code>chemsys</code> from the <code>materials.summary</code> endpoint.</p>"},{"location":"examples/0_basic/get_entry/EXAMPLE/","title":"Retrieve materials project data as ComputedStructureEntry","text":"<p>Note</p> <p>This is a useful section for anyone who only wants to get data calculated with a specific functional from Materials Project database and save it as files in res format with or without energy correction.</p> <p>In the Materials Project databsae, each unique material is given a Material ID (also referred to in various places as mp-id, mpid, MPID). This allows a specific polymorph of a given mterial to be referenced.</p> <p>All of the infromation for a given material ID is actually a combination of data generated from many individual calcualtions or tasks. An identifier referring to an individual calculation task are known as Task ID. For example, DFT caluclations with different functionals have different task ID.</p> <p>Therefore, a unique material have a material ID and a collection of multiple different task IDs associated with it. For more information, please see FAQ.</p> <p>Each set of paramters and data for different tasks of a given material can be downloaded through materials.thermo endpoint. The data can be downloded in ComputedStructureEntry format that can be easily converted to files in res format as used by AIRSS. The MPRester.get_entries() function does this.</p>"},{"location":"examples/0_basic/get_entry/EXAMPLE/#what-is-computedstructureentry","title":"What is ComputedStructureEntry?","text":"<p>Entry is an container for calculated information. ComputedStructuerEntry is a object containing the energy associated a specific chemical composition, paramaters associated with this entry, and any additional data associated with this entry.</p> <p>Example: ComputedStructureEntry of mp-135</p> <p><pre><code>print(entry)\n</code></pre> <pre><code>mp-135-GGA ComputedStructureEntry - Li1          (Li)\nEnergy (Uncorrected)     = -1.9038   eV (-1.9038  eV/atom)\nCorrection               = 0.0000    eV (0.0000   eV/atom)\nEnergy (Final)           = -1.9038   eV (-1.9038  eV/atom)\nEnergy Adjustments:\n  None\nParameters:\n  potcar_spec            = [{'titel': 'PAW_PBE Li_sv 23Jan2001', 'hash': '4799bab014a83a07c654d7196c8ecfa9'}]\n  is_hubbard             = False\n  hubbards               = {}\n  run_type               = GGA\nData:\n  oxide_type             = None\n  aspherical             = True\n  last_updated           = 2020-05-02 23:41:40.352000\n  task_id                = mp-1440853\n  material_id            = mp-135\n  oxidation_states       = {}\n  run_type               = GGA\n</code></pre></p> <p>Please refer to Entry, ComputedEntry, and ComputedStructureEntry classes in pymatgen.entries package for further details.</p> How to get the information held by the ComputedStructureEntry <p>We can get access the values or data by <pre><code>entry.entry_id\nentry.composition\nentry.elements\nentry.uncorrected_energy\nentry.uncorrected_energy_per_atom\nentry.conrrection\nentry.correction_per_atom\nentry.energy\nentry.energy_per_atom\nentry.parameters\nentry.data\nentry.structure\n</code></pre> Type of return value <pre><code>entry_id                    : &lt;class 'str'&gt;\ncomposition                 : &lt;class 'pymatgen.core.composition.Composition'&gt;\nelements:                   : &lt;class 'list'&gt;\nenergy                      : &lt;class 'float'&gt;\nenergy_per_atom             : &lt;class 'float'&gt;\nuncorrected_energy          : &lt;class 'float'&gt;\nuncorrected_energy_per_atom : &lt;class 'float'&gt;\nparameters                  : &lt;class 'dict'&gt;\ndata                        : &lt;class 'dict'&gt;\n</code></pre></p>"},{"location":"examples/0_basic/get_entry/EXAMPLE/#get-entries-from-the-mp-database","title":"Get entries from the MP database","text":"<p>mpr.get_entries() function returns a list of ComputedStructureEntry</p> <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=chemsys\n)\n</code></pre> Arguments to the get_entries() function <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids\n    compatible_only=True,\n    property_data=None,\n    conventional_unit_cell=False,\n    additional_criteria=None,\n)\n</code></pre> <ul> <li>chemsys_formula_mpids (str, List[str]):     A chemical system, list of chemical systems     (e.g., Li-Fe-O, Si-, [Si-O, Li-Fe-P]),     formula, list of formulas     (e.g., Fe2O3, Si, [SiO2, BiFeO3]),     Materials Project ID, or list of Materials Project IDs     (e.g., mp-22526, [mp-22526, mp-149]).</li> <li>compatible_only (bool): Whether to return only \"compatible\"     entries. Compatible entries are entries that have been     processed using the MaterialsProject2020Compatibility class,     which performs adjustments to allow mixing of GGA and GGA+U     calculations for more accurate phase diagrams and reaction     energies. This data is obtained from the core \"thermo\" API endpoint.</li> <li>property_data (list): Specify additional properties to include in     entry.data. If None, only default data is included. Should be a subset of     input parameters in the 'MPRester.thermo.available_fields' list.</li> <li>conventional_unit_cell (bool): Whether to get the standard     conventional unit cell</li> <li>additional_criteria (dict): Any additional criteria to pass. The keys and     values should correspond to proper function inputs to     <code>MPRester.thermo.search</code>. For instance, if you are only interested in     entries on the convex hull, you could pass     {\"energy_above_hull\": (0.0, 0.0)} or {\"is_stable\": True}.</li> </ul> <p>There are more functions to get entries, but they are high-level functions based on <code>get_entries()</code>.</p> <pre><code>entries = mpr.get_entries_in_chemsys(elements=[\"Li\", \"Ni\", \"O\"])\nentries = mpr.get_entry_by_material_id(material_id=\"mp-135\")\n</code></pre>"},{"location":"examples/0_basic/get_entry/EXAMPLE/#example-get-entries","title":"Example - get entries","text":"<pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li\"]\n)\n\nfor i, entry in enumerate(entries):\n    print(f\"\\nEntry {i+1}\\n\")\n    print(entry)\n</code></pre> <p>This returns a list of StructureComputesEntry for all materials containing only Li element.</p> <ul> <li>25 StructureComputesEntry</li> <li>9 unique material IDs</li> <li>16 unique task IDs</li> <li>2 unique run type : GGA, R2SCAN</li> </ul>"},{"location":"examples/0_basic/get_entry/EXAMPLE/#example-get-entries-selectively","title":"Example - get entries selectively","text":"<pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li\"],\n    property_data=[\"chemsys\", \"nelements\", \"thermo_type\"]\n)\n\nfor i, entry in enumerate(entries):\n    print(f\"\\nEntry {i+1}\\n\")\n    print(entry)\n</code></pre> <p>If you specify property_data, entry.data includes additional properties. This returns a list of StructureComputedEntry for all binary materials containing only Li and O elements.</p> <ul> <li>25 ComputedStructureEntry</li> <li>9 unique material IDs</li> <li>16 unique task IDs</li> <li>2 unique run_type: GGA, R2SCAN</li> <li>1 unique chemsys: Li</li> <li>1 unique nelements: 1</li> </ul> <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li\"],\n    property_data=[\"chemsys\", \"nelements\", \"thermo_type\"],\n    additional_criteria={\"is_stable\": True}\n)\n\nfor i, entry in enumerate(entries):\n    print(f\"\\nEntry {i+1}\\n\")\n    print(entry)\n</code></pre> <p>If you specify additional_criteria with {\"is_stable\": True}, only the materials on the convex hull are downloaded. This returns a list of ComputedStructureEntry for all ternary materials containing only Li-Ni-O elements.</p> <ul> <li>3 ComputedStructureEntry</li> <li>1 unique material IDs</li> <li>2 unique task IDs</li> <li>2 unique run_type: GGA, R2SCAN</li> <li>1 unique chemsys: Li</li> <li>1 unique nelements: 1</li> </ul> Note <p>There are multiple entries for a single material_id. Even for the same_material_id, task_id, run_type, there can be multiple entries. Each with different _thermo_type. <pre><code>material_id  task_id      run_type  thermo_type       chemsys       uncorrected_energy  correction    corrected_energy\nmp-1960      mp-1440823   GGA       GGA_GGA+U         Li-O                  -14.263600   -0.687000          -14.950600\nmp-1960      mp-1949896   R2SCAN    R2SCAN            Li-O                  -16.826560    0.000000          -16.826560\nmp-1960      mp-1949896   R2SCAN    GGA_GGA+U_R2SCAN  Li-O                  -16.826560    1.875960          -14.950600\n</code></pre></p>"},{"location":"examples/0_basic/get_entry_chemsys/EXAMPLE/","title":"Get all materials containing only a set of elements","text":"<p>This examples describes how to get data for materials containing only a list of elements from the Materials Project database.</p> <p>For example:</p> <ul> <li>all Li-Ni-O ternary compounds (Li + Ni + O)</li> <li>all elemental, binary, ternary compounds in Li-Ni-O chemical system.</li> </ul> <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=chemsys\n)\n</code></pre>"},{"location":"examples/0_basic/get_entry_chemsys/EXAMPLE/#examples","title":"Examples","text":"<pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li-Ni-O\"]\n)\n</code></pre> <p>This returns a list of ComputedStructureEntry for all materials containing only Li, Ni, and O elements from the Materials Project database.</p> <p>Order of elements in a hyphenated list of chemsys</p> <p>Elements can be listed in any order. For example, Li-Ni-O, O-Li-Ni, and Ni-O-Li are all considered same.</p> <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li-Ni-O\"]\n    property_data=[\"chemsys\", \"nelements\"]\n)\n</code></pre> <p>If you specify <code>property_data</code>, <code>entry.data</code> includes additional properties. This returns a list of ComputedStructureEntry for all materials containing only Li, Ni, and O elements from the Materials Project database. It returns a total of 311 entries with 1 unique chemsys and 3 elements.</p> <pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li\", \"Ni\", \"O\", \"Li-Ni\", \"Li-O\", \"Ni-O\", \"Li-Ni-O\"],\n    property_data=[\"chemsys\", \"nelements\"]\n)\n</code></pre> <p>This returns a list of ComputedStructureEntry for all elementa, binary, and ternary materials containing Li, Ni, or O elements from the Materials Project database. It returns a total of 526 entries with 7 unique chemsys and 1-3 elements.</p> <p><pre><code>entries = mpr.get_entries(\n    chemsys_formula_mpids=[\"Li\", \"Ni\", \"O\", \"Li-Ni\", \"Li-O\", \"Ni-O\", \"Li-Ni-O\"],\n    property_data=[\"chemsys\", \"nelements\"],\n    additional_criteria={\"is_stable\": True}\n)\n</code></pre> If you specify <code>additional_criteria</code> with <code>{\"is_stable\": True}</code>, only the materials on the convex hull are downloaded. This returns a list of ThermoDoc for all elementa, binary, and ternary materials containing Li, Ni, or O elements from the Materials Project database. It returns a total of 36 ThermoDoc with 6 unique chemsys and 1-3 elements.</p> <p>info tip \"Thermodynamically stable structures\"     If you are interested in the materials on the convex hull,</p> <pre><code>``` python\nadditional_criteria={\"is_stable\": True}\nor\nadditional_criteria={\"energy_above_hull\": (0.0, 0.0)}\n```\n\nIf you are interested in stable/metastable materials within 0.1 eV/atom of the hull\n\n``` python\nadditional_criteria={\"energy_above_hull\": (0.0, 0.1)}\n```\n</code></pre>"},{"location":"examples/0_basic/get_entry_elements/EXAMPLE/","title":"Get all materials containing at least a set of elements","text":"<p>This examples describes how to get data for materials containing at least a list of elements from the Materials Project database.</p> <p>For example:</p> <ul> <li>all Li-containing materials (Li + \u03b1)</li> <li>all materials containing earth abundant O and Si (O + Si + \u03b1)</li> </ul>"},{"location":"examples/0_basic/get_entry_elements/EXAMPLE/#download-entries","title":"Download entries","text":"<p><code>get_entries()</code> makes ComputedStructureEntry using ThermoDoc downloded from <code>materials.thermo</code> endpoint.</p> <p>Therefore, as shown in the ThermoDoc example, two steps are involved to get all materials containing a set of elements.</p> <p>First, a list of chemsys should be generated from materials.summary endpoint and then be used as input to materials.chemsys endpoint as follows:</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=elements,\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\nentries = mpr.get_entries(\n    chemsys_formula_mpids=chemsys,\n)\n</code></pre>"},{"location":"examples/0_basic/get_entry_elements/EXAMPLE/#examples","title":"Examples","text":"<pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\"],\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\nentries = mpr.get_entries(\n    chemsys_formula_mpids=chemsys,\n    property_data=[\"chemsys\",\"nelements\"]\n)\n</code></pre> <p>This returns 21686 SummaryDoc and 45197 StructureComputedEntry with 3372 unique chemsys and 1-8 elements.</p> <pre><code>docs = mpr.materials.summary.search(\n    elements=[\"Li\", \"Ni\", \"O\"],\n    fields=[\"chemsys\"]\n)\n\nchemsys = [doc.chemsys for doc in docs]\nchemsys = list(dict.fromkeys(chemsys))\n\ndocs = mpr.get_entries(\n    chemsys=chemsys,\n    property_data=[\"chemsys\",\"nelements\"]\n)\n</code></pre> <p>This returns 1394 SummaryDoc and 2828 StructureComputedEntry with 147 unique chemsys and 3-6 elements.</p>"},{"location":"examples/0_basic/save_to_file/EXAMPLE/","title":"Save to a file in res format","text":"<p>Once we download the data from the Materials Project database, we can directly save structures to files in AIRSS-RES format using Pymatgen package. ASE package does not support the AIRSS-RES format.</p> <p>AIRSS-RES format</p> <p><pre><code>TITL &lt;seed&gt; &lt;pressure&gt; &lt;volume&gt; &lt;energy&gt; &lt;isd&gt; &lt;iasd&gt; &lt;nfu&gt; &lt;formula&gt; &lt;space group&gt; &lt;#&gt;\n</code></pre> - seed        = unique structure name or file name - volume      = volume / cell - energy      = enthalpy / cell - isd         = integrated spin density / cell - iasd        = integrated absolute spin density / cell - nfu         = number of formula untis - formula     = formula - space group = space group</p>"},{"location":"examples/0_basic/save_to_file/EXAMPLE/#get-computedstructureentry","title":"Get ComputedStructureEntry","text":"<p>You need to have a ComputedStructureEntry object to save a structure into a res format. You can directly download the entries from the Materials Project database.</p>"},{"location":"examples/0_basic/save_to_file/EXAMPLE/#save-to-res-files","title":"Save to RES files","text":"<p>From a ComputedStructureEntry, ResIO takes the information and writes a res file. The required information are seed, pressure, energy, isd, iasd, and structure, which can be accesed as follows.</p> Required Data <p><pre><code>entry.data.get(\"seed\")\nentry.energy\nentry.data.get(\"pressure\", 0)\nentry.data.get(\"isd\", 0)\nentry.data.get(\"iasd\", 0)\nentry.data.get(\"rems\", [])\nentry.structure\n</code></pre> For more information, please refer to, ResIO.entry_to_file -&gt; ResWriter._res_from_entry</p> <p>If the structure does not have any of those information you can add to the entry.</p>"},{"location":"examples/0_basic/save_to_file/EXAMPLE/#example","title":"Example","text":"<pre><code>def mp_entry_to_res(entry):                                                                                             \n    '''                                                                                                                 \n    Writing a res files with an uncorrected energy                                                                      \n    '''                                                                                                                 \n    # make energy correction zero                                                                                       \n    entry.correction = 0                                                                                                \n\n    material_id = entry.data.get(\"material_id\", \"\")                                                                     \n    task_id = entry.data.get(\"task_id\", \"\")                                                                             \n    run_type = entry.data.get(\"run_type\", \"\")                                                                           \n\n    # TITL: add seed to entry.data                                                                                      \n\n    seed = f\"{material_id}-{run_type}\"                                                                                  \n    entry.data.update({\"seed\": seed})                                                                                   \n\n    # TITL: add pressure to entry.data                                                                                  \n\n    entry.data.update({\"pressure\": 0})                                                                                  \n\n    # TITL: add isd/iasd to entry.data - spin density                                                                   \n\n    isd = 0                                                                                                             \n    iasd = 0                                                                                                            \n    for site in entry.structure:                                                                                        \n        if 'magmom' in site.properties:                                                                                 \n             isd += site.properties['magmom']                                                                           \n             iasd += abs(site.properties['magmom'])                                                                     \n\n    entry.data.update({\"isd\": isd})                                                                                     \n    entry.data.update({\"iasd\": iasd})                                                                                   \n\n    # REM: add rems to entry.data - metadata                                                                            \n\n    rems = [                                                                                                            \n            f\"\",                                                                                                        \n            f'Downloaded from the Materials Project database',                                                          \n            f\"\",                                                                                                        \n            f\"Energy (Uncorrected)     = {entry.uncorrected_energy:&lt;16.8f} eV\",                                         \n            f\"Correction               = {entry.correction:&lt;16.8f} eV\",                                                 \n            f\"Energy (Final)           = {entry.energy:&lt;16.8f} eV\",                                                     \n            f\"\",                                                                                                        \n            f\"material_id              = {material_id}\",                                                                \n            f\"run_type                 = {run_type}\",                                                                   \n            f\"task_id                  = {task_id}\",                                                                    \n            f\"\"                                                                                                         \n    ]                                                                                                                   \n\n    entry.data.update({\"rems\": rems})                                                                                   \n\n    # write a resfile                                                                                                   \n\n    ResIO.entry_to_file(entry, f\"{seed}.res\") \n</code></pre> <p>Save to a RES file without REM</p> <p>A blank line is created between the TITL line and the CELL line. ``` TITL mp-135-R2SCAN-mp-1943895 0.00 20.3416 -2.37706 0.000000 0.000000 (Im-3m) n - 1</p>"},{"location":"examples/4_restar_rdf/EXAMPLE/","title":"RDF using ASE","text":"<p>Info</p> <p>ase.geometry.analysis</p> <p>class Analysis(images, nl, kwargs)</p> <ul> <li>images: class<ul> <li>ase.Atoms object or list of such Images to analyze.</li> </ul> </li> <li>nl: None | class<ul> <li>ase.neighborlist.NeiborList object or list of such Neighborlists for   the given images. </li> <li>One or nImages, depending if bonding pattern changes or is constant.</li> <li>Using Neiborlist greatly improves speed.</li> </ul> </li> <li>kwargs:<ul> <li>Arguments for constructing ase.neighborlist.NeiborList object if nl is   None. (build_neighbor_list)</li> </ul> </li> </ul> <p>Analysis._get_slice(imageIdx) <pre><code>ase.ga.utilities.get_rdf(\n    atoms,\n    rmax,\n    nbins,\n    distance_maxtrix=None,\n    elements=None,\n    no_dists=False\n)\n</code></pre> - rmax : float                                                                                                           - The maximum distance that will contribute to the rdf.                                                              - The unit cell should be large enough so that it encloses a                                                         - sphere with radius rmax in the periodic directions.                                                             </p> <ul> <li> <p>nbins : int                                                                                                         </p> <ul> <li>Number of bins to divide the rdf into.                                                                          </li> </ul> </li> <li> <p>distance_matrix : numpy.array                                                                                       </p> <ul> <li>An array of distances between atoms, typically                                                                  </li> <li>obtained by atoms.get_all_distances().                                                                          </li> <li>Default None meaning that it will be calculated.                                                                </li> </ul> </li> <li> <p>elements : list or tuple                                                                                            </p> <ul> <li>List of two atomic numbers. If elements is not None the partial                                                 </li> <li>rdf for the supplied elements will be returned.                                                                 </li> </ul> </li> <li> <p>no_dists : bool                                                                                                     </p> <ul> <li>If True then the second array with rdf distances will not be returned </li> </ul> </li> <li> <p>rmax: float</p> <ul> <li>Maximum distance of RDF.</li> </ul> </li> <li>nbins: int<ul> <li>Number of bins to divide RDF.</li> </ul> </li> <li>imageIdx: int | slice | None</li> <li>elements: str | int | list | tupule<ul> <li>Make partial RDFs.</li> <li>All: If elements is None, a full RDF is calculated.</li> <li>Specific atoms: If elements is an integer or a list/tuple of integers,   only those atoms will contribute to the RDF (like a mask). </li> <li>Specific elements: If elements is a string or a list/tupule of   strings, only atoms of those elements will contribute.</li> </ul> </li> </ul> <p>Here, images indicate list of ase.Atoms objects, probably the snapshots of MD trajectory.</p>"},{"location":"examples/4_restar_rdf/EXAMPLE/#-images-to-analyze","title":"- Images to analyze.","text":""}]}